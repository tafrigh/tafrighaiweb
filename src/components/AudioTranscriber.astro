---
import { Icon } from 'astro-icon/components';
---

<div class="main col">
  <div class="file col">
    <label for="audio-input" style="display: none;">Upload Audio:</label>
    <input type="file" id="audio-input" accept="audio/*" style="display: none;" />
    <md-filled-tonal-button id="file-select-button">
      <Icon slot="icon" name="upload" />
      <span id="file-button-label">Choose File</span>
    </md-filled-tonal-button>
    <div id="file-name-display"></div>

  </div>
  <style>
    .file{
gap: 0.5em;
    }
  </style>
  <div>
    <md-outlined-text-field type="text" id="youtube-input" placeholder="Enter YouTube URL">
      <Icon name="youtube" slot="trailing-icon" />
  </md-outlined-text-field>
  </div>
  <div>
    <div>
      <md-outlined-select id="model-select" label="Choose Model">
        <Icon name="rocket1" slot="leading-icon" />
        <md-select-option selected value="standard">
          <Icon name="rocket1" slot="start" />
          <div slot="headline">Standard</div>
        </md-select-option>
        <md-select-option value="turbo">
          <Icon name="rocket" slot="start" />
          <div slot="headline">Turbo</div>
        </md-select-option>
      </md-outlined-select>
    </div>
  </div>
  <md-filled-button raised id="transcribe-button"><Icon slot="icon" name="transcribe" /> Tafrigh</md-filled-button>
  <div id="transcription-output"></div>
</div>

<script>
  import "material/button/filled-button"; // Import filled-button
  import "material/button/elevated-button";
  import "material/textfield/outlined-text-field";
  import "material/select/outlined-select";
  import "material/select/select-option"
  import "material/button/filled-tonal-button";
  const audioInput = document.getElementById("audio-input") as HTMLInputElement;
  const youtubeInput = document.getElementById("youtube-input") as HTMLInputElement;
  const modelSelect = document.getElementById("model-select") as HTMLSelectElement;
  const transcribeButton = document.getElementById("transcribe-button") as HTMLButtonElement;
  const transcriptionOutput = document.getElementById("transcription-output") as HTMLDivElement;
  const fileSelectButton = document.getElementById("file-select-button") as HTMLButtonElement;
  const fileNameDisplay = document.getElementById("file-name-display") as HTMLDivElement;
  const fileButtonLabel = document.getElementById("file-button-label") as HTMLSpanElement;


  // Trigger the hidden file input when the Material button is clicked
  fileSelectButton.addEventListener("click", () => {
    audioInput.click(); // Programmatically click the hidden file input
  });

  // Update the displayed file name when a file is selected
  audioInput.addEventListener("change", () => {
    if (audioInput.files && audioInput.files.length > 0) {
      fileNameDisplay.textContent = audioInput.files[0].name;
        fileButtonLabel.textContent = "Change File";
    } else {
      fileNameDisplay.textContent = "";
        fileButtonLabel.textContent = "Choose File";
    }
  });

  transcribeButton.addEventListener("click", async () => {
    transcriptionOutput.textContent = "Transcribing...";

    let formData: FormData | null = null;
    let endpoint = "/api/transcribe";
    let isYouTube = false;
    const selectedModel = modelSelect.value; // Get the selected model

    if (audioInput.files && audioInput.files.length > 0) {
      formData = new FormData();
      formData.append("audio", audioInput.files[0]);
      formData.append("model", selectedModel); // Add the model to the form data
      endpoint = "/api/transcribe";
    } else if (youtubeInput.value.trim() !== "") {
      formData = new FormData();
      formData.append("yt_url", youtubeInput.value.trim());
      formData.append("model", selectedModel); // Add the model to the form data
      endpoint = "/api/transcribe-yt";
      isYouTube = true;
    } else {
      transcriptionOutput.textContent = "Please select an audio file or enter a YouTube URL.";
      return;
    }

    try {
      const response = await fetch(endpoint, {
        method: "POST",
        body: formData,
      });

      if (response.ok) {
        const data = await response.json();
        if (isYouTube) {
          if (data.transcription) {
            transcriptionOutput.innerHTML = `<div>${data.html || ''}</div><div>Transcription: ${data.transcription}</div>`;
          } else {
            transcriptionOutput.textContent = `Error: ${data.error || "Unknown error"}`;
          }
        } else {
          if (data.transcription) {
            transcriptionOutput.textContent = `Transcription: ${data.transcription}`;
          } else {
            transcriptionOutput.textContent = `Error: ${data.error || "Unknown error"}`;
          }
        }
      } else {
        transcriptionOutput.textContent = `Error: ${response.status} - ${response.statusText}`;
      }
    } catch (error) {
      console.error("Error during transcription:", error);
      transcriptionOutput.textContent = `Error: ${error}`;
    }
  });
</script>

<style>
  .main{
    gap:1em;
  }
</style>